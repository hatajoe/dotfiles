# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

if command -v brew >/dev/null 2>&1; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate bash)"
fi

if [ -d "/usr/local/go" ] ; then
    PATH="/usr/local/go/bin:$PATH"
fi

if [ -d "$HOME/go" ] ; then
   PATH="$HOME/go/bin:$PATH"
fi

if [ -f "$HOME/.fzf.bash" ]; then
    . "$HOME/.fzf.bash"
fi

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

parse_git_branch() {
    git rev-parse --git-dir &> /dev/null
    git_status="$?"
    if [ $git_status -eq 0 ]; then
        git_dir=$(git rev-parse --git-dir 2>/dev/null)
        if [ "$git_dir" = ".git" ]; then
            echo $(basename $PWD)
        else
            git_root=$(dirname "$git_dir")
            git_root_basename=$(basename $git_root)
            relative_path=${PWD##$git_root/}
            echo -n "$git_root_basename/$relative_path"
        fi
    else
        echo -n "\w"
    fi
}

GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
PROMPT_COMMAND='__git_ps1 "\e[1;36m\D{%H:%M:%S}\e[0;90m $(parse_git_branch)" "\e[0m\n% "'

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

if command -v socat > /dev/null 2>&1 && command -v npiperelay.exe > /dev/null 2>&1; then
    export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
    (
        set -eu
        piperelay=(setsid socat "UNIX-LISTEN:$SSH_AUTH_SOCK,fork" "EXEC:npiperelay.exe -ei -s //./pipe/openssh-ssh-agent,nofork")
        if ! pgrep "-fxU$UID" "${piperelay[*]:1}" >/dev/null; then
            rm -f "$SSH_AUTH_SOCK"
            ("${piperelay[@]}" &) >/dev/null
        fi
    )
fi

if [ -f "$HOME/.env" ]; then
    . "$HOME/.env"
fi

