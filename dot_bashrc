# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# HISTSIZE=10000
# HISTFILESIZE=2000
HISTCONTROL=ignoredups:erasedups
HISTSIZE=50000
HISTFILESIZE=5000
shopt -s histappend
PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$force_color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -l'
#alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
fi

if [ -d /etc/bash_completion.d ]; then
    for f in /etc/bash_completion.d/*; do . $f; done
fi

if [ -d /opt/homebrew/etc/bash_completion.d/ ]; then
    for f in /opt/homebrew/etc/bash_completion.d/*; do . $f; done
    __git_complete g __git_main
fi

bind 'set bell-style none'

if command -v fzf > /dev/null 2>&1 && command -v ghq > /dev/null 2>&1; then
    __gcd__() {
        repo=`ghq list | fzf --preview "bat --style=header,grid --line-range :80 $(ghq root)/{}/README.*"`
        if [ -n "$repo" ]; then
            cd "$(ghq root)/$repo"
            tmux split-window -h -c "#{pane_current_path}"
            tmux split-window -v -c "#{pane_current_path}"
            tmux select-layout 'e992,239x55,0,0{139x55,0,0[139x37,0,0,10,139x17,0,38,11],99x55,140,0,12}'
        fi
    }
    bind '"\C-]": "\C-ex\C-u __gcd__\C-m\C-y\C-b\C-d"'
fi

awsso() {
    PROFILE=$(cat ~/.aws/config | grep profile | awk '{print $2}' | tr -d '\]' | fzf)
    ACCOUNT=$(cat ~/.aws/config | grep -A 4 "\[profile ${PROFILE}\]" | grep "sso_account_id" | awk '{print $3}')
    REGION=$(cat ~/.aws/config | grep -A 4 "\[profile ${PROFILE}\]" | grep "region" | awk '{print $3}')
    aws sso login --profile "${PROFILE}"
    export AWS_PROFILE="${PROFILE}"
    if [ -n "${REGION}" ]; then
        export AWS_REGION="${REGION}"
    fi
    export AWS_ACCOUNT="${ACCOUNT}"
    export ENVIRONMENT=$(echo ${AWS_PROFILE#*-} | sed 's/-.*$//')
    aws sts get-caller-identity
}
