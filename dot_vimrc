set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'tpope/vim-surround'
Plug 'prabirshrestha/vim-lsp'
Plug 'jiz4oh/vim-lspfuzzy'
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-goimports'
Plug 'github/copilot.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'airblade/vim-gitgutter'

call plug#end()

let g:python3_host_prog = expand('~/.vim/python3/bin/python')

"" let lsp_log_verbose=1
"" let lsp_log_file = '/tmp/lsp.log'
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_settings_filetype_ruby = ['ruby-lsp', 'rubocop-lsp-mode']
let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
let g:lsp_settings_filetype_vue = ['vtsls', 'volar-server']

let g:copilot_filetypes = { 'gitcommit': v:true }

let g:netrw_liststyle=3
let g:netrw_banner=0
let g:netrw_preview=1
let g:netrw_winsize=20

let $FZF_DEFAULT_OPTS="--preview-window 'up:60%' --bind ctrl-u:preview-page-up,ctrl-d:preview-page-down"

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 3..'}, 'up:60%'))

"" autocmd
autocmd BufWritePre * :FixWhitespace

"" set vim variables """"""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set background=dark
colorscheme solarized8

set nu
set visualbell t_vb=
set viminfo+=n~/.vim/viminfo.txt
set directory=~/.vim/directory
set backupdir=~/.vim/backupdir
set undodir=~/.vim/undodir
set undofile
set backup

set hidden
set incsearch
set hlsearch
set ignorecase
set smartcase
set smartindent

set laststatus=2
set clipboard=unnamedplus
set omnifunc=lsp#complete

set statusline=%F%m\ %=%l:%v\ %{&ff}

"" key maps """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\,"
nnoremap <silent> <Leader>v :edit $HOME/.vimrc<CR>
nnoremap <Leader>re :source $HOME/.vimrc<CR>
nnoremap <Leader>gh :!gh browse $(git ls-files --full-name %)<CR><CR>

nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-h> :History<CR>
nnoremap <silent> <C-k> :Buffers<CR>
nnoremap <silent> <C-l> :Rg<CR>

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <C-]> <plug>(lsp-definition)
    nmap <buffer> <C-\> <plug>(lsp-type-definition)
    nmap <buffer> <leader>f <plug>(lsp-document-format)
    nmap <buffer> <leader>a <plug>(lsp-code-action)
    nmap <buffer> <leader>r <plug>(lsp-references)
    nmap <buffer> <leader>i <plug>(lsp-implementation)
    nmap <buffer> <leader>e <plug>(lsp-rename)
    nmap <buffer> <leader>l <plug>(lsp-document-diagnostics)
    nmap <buffer> <leader>n <plug>(lsp-previous-diagnostic)
    nmap <buffer> <leader>p <plug>(lsp-next-diagnostic)
    nmap <buffer> <leader>h <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-d> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-u> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

imap <C-N> <Plug>(copilot-next)
imap <C-P> <Plug>(copilot-previous)
